{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karl\\\\Documents\\\\3rd year (1st sem)\\\\FINALS\\\\SYSTEM-CLIENT-main\\\\src\\\\pages\\\\UpdatePassword.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Form, Button, Alert, Container } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UpdatePassword = () => {\n  _s();\n  // State to hold form data and response messages\n  const [currentPassword, setCurrentPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Basic validation\n    if (newPassword !== confirmPassword) {\n      setError(\"New passwords do not match.\");\n      return;\n    }\n    if (newPassword.length < 6) {\n      setError(\"New password must be at least 6 characters.\");\n      return;\n    }\n    try {\n      // Send a POST request to the backend API to update the password\n      const response = await fetch(\"http://localhost:3000/update-password\", {\n        // Replace with your backend URL\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"authToken\")}` // Assuming token is stored in localStorage\n        },\n        body: JSON.stringify({\n          currentPassword,\n          newPassword\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        // If success, show success message\n        setMessage(result.message);\n        setError(\"\");\n      } else {\n        // If error, show error message\n        setMessage(\"\");\n        setError(result.message || \"An error occurred\");\n      }\n    } catch (err) {\n      // Handle network or other errors\n      setMessage(\"\");\n      setError(\"An error occurred while updating the password\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Update Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"success\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Current Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"password\",\n          value: currentPassword,\n          onChange: e => setCurrentPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"password\",\n          value: newPassword,\n          onChange: e => setNewPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Confirm New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"password\",\n          value: confirmPassword,\n          onChange: e => setConfirmPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Update Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(UpdatePassword, \"+XVIKiS6suUTJOt9pgYgvRWhJQ4=\");\n_c = UpdatePassword;\nexport default UpdatePassword;\nvar _c;\n$RefreshReg$(_c, \"UpdatePassword\");","map":{"version":3,"names":["React","useState","Form","Button","Alert","Container","jsxDEV","_jsxDEV","UpdatePassword","_s","currentPassword","setCurrentPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","message","setMessage","error","setError","handleSubmit","e","preventDefault","length","response","fetch","method","headers","localStorage","getItem","body","JSON","stringify","result","json","ok","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","onSubmit","Group","Label","Control","type","value","onChange","target","required","_c","$RefreshReg$"],"sources":["C:/Users/Karl/Documents/3rd year (1st sem)/FINALS/SYSTEM-CLIENT-main/src/pages/UpdatePassword.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Form, Button, Alert, Container } from \"react-bootstrap\";\r\n\r\nconst UpdatePassword = () => {\r\n  // State to hold form data and response messages\r\n  const [currentPassword, setCurrentPassword] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Basic validation\r\n    if (newPassword !== confirmPassword) {\r\n      setError(\"New passwords do not match.\");\r\n      return;\r\n    }\r\n\r\n    if (newPassword.length < 6) {\r\n      setError(\"New password must be at least 6 characters.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Send a POST request to the backend API to update the password\r\n      const response = await fetch(\"http://localhost:3000/update-password\", { // Replace with your backend URL\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${localStorage.getItem(\"authToken\")}`, // Assuming token is stored in localStorage\r\n        },\r\n        body: JSON.stringify({\r\n          currentPassword,\r\n          newPassword,\r\n        }),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (response.ok) {\r\n        // If success, show success message\r\n        setMessage(result.message);\r\n        setError(\"\");\r\n      } else {\r\n        // If error, show error message\r\n        setMessage(\"\");\r\n        setError(result.message || \"An error occurred\");\r\n      }\r\n    } catch (err) {\r\n      // Handle network or other errors\r\n      setMessage(\"\");\r\n      setError(\"An error occurred while updating the password\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className=\"mt-5\">\r\n      <h2>Update Password</h2>\r\n\r\n      {/* Show success/error messages */}\r\n      {message && <Alert variant=\"success\">{message}</Alert>}\r\n      {error && <Alert variant=\"danger\">{error}</Alert>}\r\n\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group className=\"mb-3\">\r\n          <Form.Label>Current Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            value={currentPassword}\r\n            onChange={(e) => setCurrentPassword(e.target.value)}\r\n            required\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\">\r\n          <Form.Label>New Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            value={newPassword}\r\n            onChange={(e) => setNewPassword(e.target.value)}\r\n            required\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\">\r\n          <Form.Label>Confirm New Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            value={confirmPassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n            required\r\n          />\r\n        </Form.Group>\r\n\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Update Password\r\n        </Button>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdatePassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}